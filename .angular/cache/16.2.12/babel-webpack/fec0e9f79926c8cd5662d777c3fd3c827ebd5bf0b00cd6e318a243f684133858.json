{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./api-call.service\";\nimport * as i2 from \"@angular/router\";\n/*\nThe login will call the API and log in a user.\nThis logs on the user on the client save, and saves it as userOn.\nIt also logs in the user in the database via API.\nSeveral users can be logged into the database.\nOnly one at a time logged into the client.\n\nThis service provides a boolean if a user is logged on (and user email on request).\nThus can be injected as a service to other components.\nAnd then, check if a user is logged on or not before doing some action.\n*/\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(ApiCallService, router) {\n      this.ApiCallService = ApiCallService;\n      this.router = router;\n      this.userLoggedOn = false;\n      this.userOn = {};\n      this.response = '';\n      this.users = [];\n    }\n    // Get user on\n    getUserOn() {\n      if (this.userLoggedOn) {\n        return this.users;\n      }\n      return false;\n    }\n    // Get all users\n    getUsers() {\n      return this.users;\n    }\n    // Log out user\n    logOut() {\n      this.userLoggedOn = false;\n      this.response = 'Logged out';\n      this.logoutApi();\n    }\n    // Callback \n    // Login\n    callback1(thisObj, res, result) {\n      console.log(result);\n      console.log(res);\n      // thisObj.response = result.data.msg;\n      if (result.data != undefined) {\n        if (result.data.msg != undefined) {\n          thisObj.userLoggedOn = true;\n          thisObj.response = 'User logged on';\n          thisObj.userLoggedOn = true;\n          thisObj.users = {\n            name: 'loggedOn'\n          };\n          console.log(thisObj.users);\n          thisObj.router.navigate(['reportApi']);\n        }\n      }\n      if (result.error != undefined) {\n        // thisObj.userLoggedOn = false;\n        thisObj.response = result.error;\n        thisObj.userOn = {};\n        thisObj.users = {\n          name: 'error'\n        };\n        console.log(thisObj.users);\n      }\n    }\n    // Logout\n    callback2(thisObj, res, result) {\n      console.log(result);\n      console.log(res);\n      // thisObj.response = result.data.msg;\n      if (result.data != undefined) {\n        if (result.data.msg != undefined) {\n          thisObj.userLoggedOn = false;\n          thisObj.response = 'User logged off';\n          thisObj.users = {};\n        }\n      }\n      if (result.error != undefined) {\n        // thisObj.userLoggedOn = false;\n        thisObj.response = result.error;\n        thisObj.userOn = {};\n        thisObj.users = {\n          name: 'error'\n        };\n        console.log(thisObj.users);\n      }\n    }\n    // Login\n    login(email, password) {\n      var url = 'https://me-api.ysojs.se/users/login';\n      var params;\n      var token = null;\n      var obj1 = this;\n      params = {\n        \"email\": email,\n        \"password\": password\n      };\n      this.response = '';\n      this.ApiCallService.fetchCall(params, url, 'POST', this.callback1, token, obj1);\n      this.userOn = {\n        \"email\": email\n      };\n    }\n    logoutApi() {\n      var url = 'https://me-api.ysojs.se/users/logout';\n      var params;\n      var token = null;\n      var obj1 = this;\n      this.response = '';\n      this.ApiCallService.fetchCall(params, url, 'POST', this.callback2, token, obj1);\n      this.userOn = {};\n    }\n    static #_ = this.ɵfac = function LoginService_Factory(t) {\n      return new (t || LoginService)(i0.ɵɵinject(i1.ApiCallService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginService,\n      factory: LoginService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}