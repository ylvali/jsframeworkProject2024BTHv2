{"ast":null,"code":"// import { Observable } from 'rxjs/Observable';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-socket-io\";\nexport class ChatService {\n  constructor(socket) {\n    this.socket = socket;\n    this.comments = [{\n      'comment': 'comment'\n    }];\n    this.getMessages = () => {\n      return Observable.create(observer => {\n        this.socket.on('chat message', message => {\n          observer.next(message);\n        });\n      });\n    };\n    var comments = new Array();\n    this.socket.on('chat message', msg => {\n      console.log('new msg: ' + msg);\n      comments.push({\n        comment: msg\n      });\n      console.log(comments);\n    });\n  }\n  sendMessage(msg) {\n    this.socket.emit('chat message', msg);\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.Socket));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Observable","ChatService","constructor","socket","comments","getMessages","create","observer","on","message","next","Array","msg","console","log","push","comment","sendMessage","emit","_","i0","ɵɵinject","i1","Socket","_2","factory","ɵfac","providedIn"],"sources":["/mnt/c/Users/ylva/dbwebbkurser/jsramverk/2023version/yso/projektJs2024/frontendProj/src/app/chat-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { map } from 'rxjs/operators';\n// import { Observable } from 'rxjs/Observable';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  constructor(private socket: Socket) { \n      var comments = new Array;\n\n      this.socket.on('chat message', (msg:string) => {\n        console.log('new msg: ' + msg);\n        comments.push({comment: msg});\n        console.log(comments);\n      });\n  }\n\n  comments = [{'comment':'comment'}];\n\n  sendMessage(msg: string) {\n    this.socket.emit('chat message', msg);\n  }\n\n  public getMessages = () => {\n    return Observable.create((observer) => {\n        this.socket.on('chat message', (message) => {\n            observer.next(message);\n        });\n    });\n}\n}\n\n"],"mappings":"AAGA;AACA,SAASA,UAAU,QAAY,MAAM;;;AAKrC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAU1B,KAAAC,QAAQ,GAAG,CAAC;MAAC,SAAS,EAAC;IAAS,CAAC,CAAC;IAM3B,KAAAC,WAAW,GAAG,MAAK;MACxB,OAAOL,UAAU,CAACM,MAAM,CAAEC,QAAQ,IAAI;QAClC,IAAI,CAACJ,MAAM,CAACK,EAAE,CAAC,cAAc,EAAGC,OAAO,IAAI;UACvCF,QAAQ,CAACG,IAAI,CAACD,OAAO,CAAC;QAC1B,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IArBK,IAAIL,QAAQ,GAAG,IAAIO,KAAK,CAAL,CAAK;IAExB,IAAI,CAACR,MAAM,CAACK,EAAE,CAAC,cAAc,EAAGI,GAAU,IAAI;MAC5CC,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGF,GAAG,CAAC;MAC9BR,QAAQ,CAACW,IAAI,CAAC;QAACC,OAAO,EAAEJ;MAAG,CAAC,CAAC;MAC7BC,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;IACvB,CAAC,CAAC;EACN;EAIAa,WAAWA,CAACL,GAAW;IACrB,IAAI,CAACT,MAAM,CAACe,IAAI,CAAC,cAAc,EAAEN,GAAG,CAAC;EACvC;EAAC,QAAAO,CAAA,G;qBAhBUlB,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXvB,WAAW;IAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}